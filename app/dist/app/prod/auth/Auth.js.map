{"version":3,"sources":["../../../../prod/auth/Auth.js"],"names":["Auth","_dbc","DBHelper","email","password","callback","fetchUserQuery","name","text","values","toString","validate","getDb","queryWithConfig","err","result","console","error","stack","log","resultLength","rows","length","status","forEach","user","addUserQuery","login","flag","authenticate","addUser","_answer","Answer","getId"],"mappings":";;;;;;;;AAEA;;;AADA;;AAEA;;;;IAKaA,I,WAAAA,I;AAKT,oBAAc;AAAA;;AACV;AACA,aAAKC,IAAL,GAAY,IAAIC,kBAAJ,EAAZ;AACH;;;;gCAGO;AACJ,mBAAO,KAAKD,IAAZ;AACH;;AAED;;;;;;;;;;;;qCASaE,K,EAAOC,Q,EAAUC,Q,EAAU;AACpC;AACA,gBAAMC,iBAAiB;AACnBC,sBAAM,YADa;AAEnBC,sBAAM,0DAFa;AAGnBC,wBAAQ,CAACN,MAAMO,QAAN,EAAD,EAAmBN,SAASM,QAAT,EAAnB;AAHW,aAAvB;;AAMA,gBAAI,KAAKC,QAAL,CAAcR,KAAd,EAAqBC,QAArB,CAAJ,EAAoC;;AAEhC,qBACKQ,KADL,GAEKC,eAFL,CAEqBP,cAFrB,EAEqC,UAACQ,GAAD,EAAMC,MAAN,EAAiB;AAC9C,wBAAID,GAAJ,EAAS;AACLE,gCAAQC,KAAR,CAAcH,IAAII,KAAlB;AACAF,gCAAQG,GAAR,CAAY,wBAAZ;AACAd,iCAAS,KAAT;AACA;AACH;;AAEF,wBAAMe,eAAeL,OAAOM,IAAP,CAAYC,MAAjC;;AAEC,wBAAIP,OAAOM,IAAP,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,4BAAIC,SAAS,IAAb;AACAP,gCAAQG,GAAR,CAAY,wBAAZ;AACAd,iCAASkB,MAAT;;AAEAR,+BAAOM,IAAP,CAAYG,OAAZ,CAAoB,UAACC,IAAD,EAAU;AAC1BT,oCAAQG,GAAR,CAAYM,IAAZ;AACH,yBAFD;AAGA;AACH;;AAEDT,4BAAQG,GAAR,CAAY,0CAA0CC,YAAtD;AACAf,6BAAS,KAAT;AAEH,iBA1BL;AA2BH;AACJ;;AAED;;;;;;;;;;;gCAQQE,I,EAAMJ,K,EAAOC,Q,EAAUC,Q,EAAU;AAAA;;AACrC;;AAEA,gBAAMqB,eAAe;AACjBnB,sBAAM,UADW;AAEjBC,sBAAM,6DAFW;AAGjBC,wBAAQ,CAACF,IAAD,EAAOJ,KAAP,EAAcC,QAAd;;AAHS,aAArB;;AAOA,iBACKQ,KADL,GAEKC,eAFL,CAEqBa,YAFrB,EAEmC,UAACZ,GAAD,EAAMC,MAAN,EAAiB;AAC5C,oBAAGD,GAAH,EAAO;AACHE,4BAAQG,GAAR,CAAY,wBAAZ;AACAd,6BAAS,KAAT;AACAW,4BAAQC,KAAR,CAAcH,IAAII,KAAlB;AACA;AACH;;AAEDF,wBAAQG,GAAR,CAAY,wBAAZ;;AAEAd,yBAAS,IAAT;AACA;AACA,sBAAKsB,KAAL,CAAWxB,KAAX,EAAkBC,QAAlB,EAA4B,UAACwB,IAAD,EAAU,CAErC,CAFD;AAGH,aAjBL;AAkBH;;AAED;;;;;;;;;8BAMMzB,K,EAAOC,Q,EAAUC,Q,EAAU;;AAE7B;;AAEA,iBAAKwB,YAAL,CAAkB1B,KAAlB,EAAyBC,QAAzB,EAAmC,UAACwB,IAAD,EAAU;AACzC,oBAAGA,IAAH,EAAQ;AACJZ,4BAAQG,GAAR,CAAY,qBAAZ;AACH;AACDd,yBAASuB,IAAT;AACH,aALD;AAOH;;AAED;;;;;;;;;;;;+BASOrB,I,EAAMJ,K,EAAOC,Q,EAAUC,Q,EAAU;;AAEpC,gBAAI,KAAKM,QAAL,CAAcJ,IAAd,EAAoBJ,KAApB,EAA2BC,QAA3B,CAAJ,EAA0C;AACtC,uBAAO,KAAK0B,OAAL,CAAavB,IAAb,EAAmBJ,KAAnB,EAA0BC,QAA1B,EAAoC,UAACwB,IAAD,EAAU;AACjD,wBAAGA,IAAH,EAAQ;AACJvB,iCAASuB,IAAT;AACA;AACH;AACDvB,6BAAS,KAAT;AACH,iBANM,CAAP;AAOH;;AAEDA,qBAAS,KAAT;AAEH;;AAGD;;;;;;;;;;;iCAQSE,I,EAAMJ,K,EAAOC,Q,EAAU;;AAE5B,mBAAO,IAAP;AACH;;;oCAIW;AACR,gBAAI2B,UAAU,IAAIC,cAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,EAAjB,EAAqB,EAArB,CAAd,CADQ,CACkC;AAC1C,mBAAOD,QAAQE,KAAR,EAAP;AACH","file":"Auth.js","sourcesContent":["\nimport { Answer } from '../data/model/Answer';\n// import { Factory } from '../Factory';\nimport { DBHelper } from '../data/db/DBHelper';\n\n\n\n\nexport class Auth {\n\n\n\n\n    constructor() {\n        // this._factory = new Factory();\n        this._dbc = new DBHelper();\n    }\n\n   \n    getDb() {\n        return this._dbc;\n    }\n\n    /**\n     * Authenticates users i.e. check if users are registered,\n     * then logs them in\n     * \n     * @param {String} email \n     * @param {String} passWord \n     * \n     * @returns {Boolean}\n     */\n    authenticate(email, password, callback) {\n        // let flag = false;\n        const fetchUserQuery = {\n            name: 'fetch-user',\n            text: 'SELECT * FROM users WHERE email = $1 AND  password = $2 ',\n            values: [email.toString(), password.toString()],\n        };\n\n        if (this.validate(email, password)) {\n\n            this\n                .getDb()\n                .queryWithConfig(fetchUserQuery, (err, result) => {\n                    if (err) {\n                        console.error(err.stack);\n                        console.log(\"Authentication failure\");\n                        callback(false);\n                        return;\n                    }\n                    \n                   const resultLength = result.rows.length;\n\n                    if (result.rows.length === 1) {\n                        let status = true;\n                        console.log(\"Authentication success\");\n                        callback(status);\n\n                        result.rows.forEach((user) => {\n                            console.log(user);\n                        });\n                        return;\n                    }\n\n                    console.log(\"Authentication failure: Invalid User \" + resultLength );\n                    callback(false);\n\n                });\n        }\n    }\n\n    /**\n     * Adds user to database\n     * \n     * @param {String} email \n     * @param {String} password \n     * \n     * @returns {Boolean}\n     */\n    addUser(name, email, password, callback) {\n        // let flag = false;\n\n        const addUserQuery = {\n            name: 'add-user',\n            text: 'INSERT INTO users(name, email, password) VALUES($1, $2, $3)',\n            values: [name, email, password],\n\n        };\n\n        this\n            .getDb()\n            .queryWithConfig(addUserQuery, (err, result) => {\n                if(err){\n                    console.log(\"Could not sign up user\");\n                    callback(false);\n                    console.error(err.stack);\n                    return;\n                }\n   \n                console.log(\"Added User sucessfully\");\n                \n                callback(true);               \n                // signs user in and creates a session\n                this.login(email, password, (flag) => {\n\n                }); \n            });\n    }\n\n    /**\n     * Logs user into the platform\n     * \n     * @param {String} email \n     * @param {String} password \n     */\n    login(email, password, callback) {\n\n        // let flag = false;\n    \n        this.authenticate(email, password, (flag) => {  \n            if(flag){\n                console.log(\"Login was sucessful\");   \n            }\n            callback(flag);\n        });\n\n    }\n\n    /**\n     * Signs user up\n     * \n     * @param {String} name\n     * @param {String} email \n     * @param {String} password \n     * \n     * @returns {Boolean}\n     */\n    signUp(name, email, password, callback) {\n\n        if (this.validate(name, email, password)) {\n            return this.addUser(name, email, password, (flag) => {\n                if(flag){\n                    callback(flag);\n                    return;\n                }\n                callback(false);\n            });\n        }\n\n        callback(false);\n\n    }\n\n\n    /**\n     * Validates parameters \n     * \n     * @param {String} email \n     * @param {String} password \n     * \n     * @returns {Boolean}\n     */\n    validate(name, email, password) {\n\n        return true;\n    }\n\n    \n\n    testModel() {\n        let _answer = new Answer(1, 2, \"\", \"\");   //new Answer(1, 2, \"\", \"\" );\n        return _answer.getId();\n    }\n}\n\n\n\n\n"]}