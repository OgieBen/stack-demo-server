{"version":3,"sources":["../../../../../prod/data/db/DBHelper.js"],"names":["DBHelper","_pool","Pool","user","process","env","USER","host","database","password","port","max","query","callback","pool","getPool","toString","err","res","end","User","createUserTable","name","text","createQuestionQuery","createQuestionCommentQuery","createAnswerTable","createAnswersCommentTable","flag","console","error","stack","log","tableNames","i","length","value"],"mappings":"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","file":"DBHelper.js","sourcesContent":["import { Pool } from 'pg';\nimport { User } from '../model/User';\n\n\n\n\nexport class DBHelper {\n\n    constructor() {\n        // this.configString = config['PG_CONNECT'];\n        this._pool = new Pool({\n            user: process.env.USER,\n            host: 'localhost',\n            database: 'slackdemo',\n            password: null,\n            port: 5432,\n            max: 400,\n        });\n\n    }\n\n    // callback takes client object\n    /* _connect(err, callback){\n        pg.connect(this.configString, (err, client, done) => {\n                \n            if(err){\n                    err();\n                    return;\n                }\n            callback(client);\n            done()\n            return\n\n        });\n    } */\n\n    /**\n     * Executes Queries\n     * \n     * @param {Callback} errCallback \n     * @param {String} query \n     * @param {Callback} callback \n     * \n     * @returns {Boolean}\n     */\n    query(query, callback) {\n        let pool = this\n            .getPool();\n\n        pool.query(query.toString(), (err, res) => {\n            callback(err, res);\n            pool.end();\n        });\n\n\n    }\n\n    /**\n     * Executes Queries with config\n     * \n     * @param {Callback} errCallback \n     * @param {String} query \n     * @param {Callback} callback \n     * \n     * @returns {Boolean}\n     */\n    queryWithConfig(query, callback) {\n        let pool = this\n            .getPool();\n\n        pool.query(query, (err, res) => {\n            callback(err, res);\n        });\n\n        // pool.end();\n    }\n\n\n    /**\n     * Adds a user to database\n     * \n     * @param {User} user \n     * \n     * @returns {Boolean}\n     */\n    addUser(user) {\n        if (user instanceof User) {\n            return true;\n        }\n        return false;\n    }\n\n    setUpDb() {\n\n        /**\n         * Users table\n         */\n        const createUserTable = {\n            name: 'create-users-table',\n            text: 'CREATE TABLE users ('\n                + 'id SERIAL NOT NULL primary key,'\n                + 'name varchar(30) NOT NULL,'\n                + 'email varchar(30) NOT NULL UNIQUE,'\n                + 'password varchar(60) NOT NULL,'\n                + 'timestamp timestamp'\n                + ');'\n                + ''\n                // + 'CREATE TABLE answers ('\n                // + 'id int primary key,'\n                // + 'question_id int ,' // references Question(question_id)\n                // + 'content varchar(80),'\n                // + 'user_id int references users(user_id),'\n                // + 'timestamp timestamp'\n                // + ');'\n                + '',\n            // value: [] \n        }\n\n        /** Question Table */\n        const createQuestionQuery = {\n            name: 'create-questions-table',\n            text: 'CREATE TABLE questions ('\n                + 'id SERIAL NOT NULL primary key,'\n                + 'accepted_answer_id int,' // \n                + 'content varchar(5000) NOT NULL,'\n                + 'user_id int NOT NULL references users(id),'\n                + 'total_answers int DEFAULT 0,'\n                + 'timestamp timestamp'\n                + ');'\n                + '',\n            // value: [] \n        }\n\n        const createQuestionCommentQuery = {\n            name: 'create-qcomment-table',\n            text: 'CREATE TABLE q_comments ('\n                + 'id SERIAL NOT NULL primary key,'\n                + 'question_id int NOT NULL references questions(id),' // \n                + 'content varchar(5000) NOT NULL,'                \n                + 'user_id int NOT NULL references users(id),'\n                + 'timestamp timestamp'\n                + ');'\n                + '',\n            // value: [] \n        }\n\n        /** Answer Table  */\n        /* -------- Answer Table starts here  */\n        const createAnswerTable = {\n            name: 'create-answers-table',\n            text: 'CREATE TABLE answers ('\n                + 'id SERIAL NOT NULL primary key,'\n                + 'question_id int NOT NULL references questions(id),' // \n                + 'content varchar(5000) NOT NULL,'\n                + 'up_vote int DEFAULT 0,'\n                + 'down_vote int DEFAULT 0,'\n                + 'user_id int NOT NULL references users(id),'\n                + 'timestamp timestamp'\n                + ') ;'\n                + '',\n            // value: [] \n        }\n\n        const createAnswersCommentTable = {\n            name: 'create-acomments-table',\n            text: 'CREATE TABLE a_comments ('\n                + 'id SERIAL NOT NULL primary key,'\n                + 'answer_id int NOT NULL references answers(id),' // \n                + 'content varchar(5000),'\n                + 'user_id int NOT NULL references users(id),'\n                + 'timestamp timestamp'\n                + ');'\n                + '',\n        }\n\n\n\n\n        let pool = this\n            .getPool();\n\n        let flag = false;\n\n        pool.query(createUserTable, (err, res) => {\n            if (err) {\n                console.error(err.stack);\n                console.log(\"Error setting up UserTable\");\n                return;\n            }\n            console.log(\"UserTable was set up succesfully\");\n\n            pool.query(createQuestionQuery, (err, res) => {\n                if (err) {\n                    console.error(err.stack);\n                    console.log(\"Error setting up QuestionQuery\");\n                    return;\n                }\n\n                console.log(\"QuestionQuery was set up succesfully\");\n                pool.query(createQuestionCommentQuery, (err, res) => {\n                    if (err) {\n                        console.error(err.stack);\n                        console.log(\"Error setting up QuestionCommentQuery\");\n                        return;\n                    }\n\n                    console.log(\"QuestionCommentQuery was set up succesfully\");\n                    pool.query(createAnswerTable, (err, res) => {\n                        if (err) {\n                            console.error(err.stack);\n                            console.log(\"Error setting AnswerTable\");\n                            return;\n                        }\n\n                        console.log(\"AnswerTable was set up succesfully\");\n                        pool.query(createAnswersCommentTable, (err, res) => {\n                            if (err) {\n                                console.error(err.stack);\n                                console.log(\"Error setting AnswersCommentTable\");\n                                flag = false;\n                                return;\n                            }\n                            flag = true;\n                            // pool.end();\n                            console.log(\"AnswersCommentTable was set up succesfully\");\n                            console.log(\"Database was set up succesfully\");\n                        })\n                    });\n\n                });\n            });\n\n        });\n\n\n        return flag;\n\n    }\n\n    dropTables(...tableNames) {\n\n        let text = 'DROP TABLE ';\n        let pool = this.getPool();\n\n        for (let i = 0; i < tableNames.length; i++) {\n            if (i === (tableNames.length - 1)) {\n                text = text + `$${i}`;\n            } else {\n                text = text + `$${i},`;\n            }\n        }\n\n        const query = {\n            name: 'drop-tables',\n            text: text.toString(),\n            value: tableNames\n        }\n\n        pool.query(query, (err, res) => {\n            if (err) {\n                console.error(err.stack);\n            }\n\n            console.log('Tables were removed successfully');\n        });\n\n\n\n    }\n\n    end() {\n        this\n            ._pool\n            .end();\n    }\n\n    getPool() {\n        return this._pool;\n    }\n\n\n    \n\n\n\n    tester() {\n        return `Testing DBConncter! `;\n        // ${config['PG_CONNET']}\n    }\n\n\n}"]}