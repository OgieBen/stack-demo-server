{"version":3,"sources":["../../../../prod/data/Repo.js"],"names":["Repo","_db","DBHelper","content","userId","callback","query","name","text","values","queryWithConfig","err","res","console","log","error","stack","questionId","rows"],"mappings":";;;;;;;;;AACA;;;;IAGaA,I,WAAAA,I;AAGT,oBAAa;AAAA;;AACT,aAAKC,GAAL,GAAW,IAAIC,kBAAJ,EAAX;AACH;;;;oCAEWC,O,EAASC,M,EAASC,Q,EAAS;;AAEnC,gBAAMC,QAAQ;AACVC,sBAAM,iBADI;AAEVC,sBAAM,yDAFI;AAGVC,wBAAQ,CAACN,OAAD,EAAUC,MAAV;AAHE,aAAd;AAKA,iBACKH,GADL,CAEKS,eAFL,CAEqBJ,KAFrB,EAE4B,UAACK,GAAD,EAAMC,GAAN,EAAc;AAClC,oBAAGD,GAAH,EAAO;AACHN,6BAAS,KAAT;AACAQ,4BAAQC,GAAR,CAAY,4BAAZ;AACAD,4BAAQE,KAAR,CAAcJ,IAAIK,KAAlB;AACA;AACH;;AAED;AACAX,yBAAS,IAAT;AACH,aAZL;AAaH;;;uCAEcY,U,EAAYZ,Q,EAAU;AACjC,gBAAMC,QAAQ;AACVC,sBAAM,kBADI;AAEVC,sBAAM,sCAFI;AAGVC,wBAAQ,CAACQ,UAAD;;AAGZ;AANc,aAAd,CAOA,KACKhB,GADL,CAEKS,eAFL,CAEqBJ,KAFrB,EAE4B,UAACK,GAAD,EAAMC,GAAN,EAAc;AAClC,oBAAGD,GAAH,EAAO;AACHN,6BAAS,KAAT;AACAQ,4BAAQC,GAAR,CAAY,8BAAZ;AACAD,4BAAQE,KAAR,CAAcJ,IAAIK,KAAlB;AACA;AACH;;AAED;AACAH,wBAAQC,GAAR,CAAY,sBAAZ;AACAT,yBAAS,IAAT;AACH,aAbL;AAcH;;;0CAEiBA,Q,EAAU;;AAExB,gBAAMC,QAAQ;AACVC,sBAAM,qBADI;AAEVC,sBAAM,yBAFI;AAGVC,wBAAQ;AAHE,aAAd;AAKA,iBACKR,GADL,CAEKS,eAFL,CAEqBJ,KAFrB,EAE4B,UAACK,GAAD,EAAMC,GAAN,EAAc;AAClC,oBAAGD,GAAH,EAAO;AACHN,6BAAS,KAAT;AACAQ,4BAAQC,GAAR,CAAY,0BAAZ;AACA;AACH;;AAEDT,yBAASO,IAAIM,IAAb;AACH,aAVL;AAWH;;;sCAEaD,U,EAAYZ,Q,EAAU;AAChC,gBAAMC,QAAQ;AACVC,sBAAM,gBADI;AAEVC,sBAAM,uCAFI;AAGVC,wBAAQ,CAACQ,UAAD;AAHE,aAAd;AAKA,iBACKhB,GADL,CAEKS,eAFL,CAEqBJ,KAFrB,EAE4B,UAACK,GAAD,EAAMC,GAAN,EAAc;AAClC,oBAAGD,GAAH,EAAO;AACHN,6BAAS,KAAT;AACAQ,4BAAQC,GAAR,CAAY,yBAAZ;AACA;AACH;;AAEDT,yBAASO,IAAIM,IAAb;AACH,aAVL;AAWH;;;qCAEYD,U,EAAYZ,Q,EAAU;AAC/B,gBAAMC,QAAQ;AACVC,sBAAM,eADI;AAEVC,sBAAM,8CAFI;AAGVC,wBAAQ,CAACQ,UAAD;AAHE,aAAd;AAKA,iBACKhB,GADL,CAEKS,eAFL,CAEqBJ,KAFrB,EAE4B,UAACK,GAAD,EAAMC,GAAN,EAAc;AAClC,oBAAGD,GAAH,EAAO;AACHN,6BAAS,KAAT;AACAQ,4BAAQC,GAAR,CAAY,yBAAZ;AACA;AACH;;AAEDT,yBAASO,IAAIM,IAAb;AACH,aAVL;AAWH;;;0DAEiC,CAEjC;;;6CAEoB,CAEpB;;;6CAEoB,CAEpB;;;+CAEsB,CAEtB;;AAGD;;;;uCACe,CAEd;;;yCAEgB,CAEhB;;AAED;;;;2CACmB,CAElB","file":"Repo.js","sourcesContent":["\nimport { DBHelper } from './db/DBHelper';\n\n\nexport class Repo {\n\n\n    constructor(){\n        this._db = new DBHelper();\n    }\n\n    addQuestion(content, userId,  callback){\n\n        const query = {\n            name: 'fetch-questions',\n            text: 'INSERT INTO questions(content, user_id) VALUES($1, $2);',\n            values: [content, userId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error adding question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    deleteQuestion(questionId, callback) {\n        const query = {\n            name: 'delete-questions',\n            text: 'DELETE FROM questions where id = $1;', \n            values: [questionId]\n        }\n\n        //'DELETE FROM questions where id = $1;', //'DELETE FROM questions where id = $1 AND user_id = $2;',\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error deleting question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                console.log(\"Delete was Succesful\");\n                callback(true);\n            });\n    }\n\n    fetchAllQuestions(callback) {\n\n        const query = {\n            name: 'fetch-all-questions',\n            text: 'SELECT * from questions',\n            values: [],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching questions\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchQuestion(questionId, callback) {\n        const query = {\n            name: 'fetch-question',\n            text: 'SELECT * from questions where id = $1',\n            values: [questionId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchAnswers(questionId, callback) {\n        const query = {\n            name: 'fetch-answers',\n            text: 'SELECT * from answers where question_id = $1',\n            values: [questionId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchQuestionWithHighestAnswers() {\n        \n    }\n\n    fetchUserQuestions() {\n\n    }\n\n    addCommentToAnwser() {\n\n    }\n\n    addCommentToQuestion() {\n\n    }\n\n\n    /* upvote and downvotes */\n    upvoteAnswer() {\n\n    }\n\n    downVoteAnswer() {\n\n    }\n\n    /* search */\n    searchForAnswers() {\n\n    }\n\n    \n\n}"]}