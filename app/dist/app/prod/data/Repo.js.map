{"version":3,"sources":["../../../../prod/data/Repo.js"],"names":["Repo","_db","DBHelper","questionId","content","userId","callback","query","name","text","values","queryWithConfig","err","res","console","log","error","stack","updateAnswerTotalCount","status","rows","answerId","length","user_id","questionString"],"mappings":"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","file":"Repo.js","sourcesContent":["\nimport { DBHelper } from './db/DBHelper';\n\n\nexport class Repo {\n\n\n    constructor() {\n        this._db = new DBHelper();\n    }\n\n\n    addAnswer(questionId, content, userId, callback) {\n\n        // TODO: MAKE INSERT QUERY A TRANSACTION\n        const query = {\n            name: 'fetch-answers',\n            text: 'INSERT INTO answers(question_id, content, user_id) VALUES($1, $2, $3);',\n            values: [questionId, content, userId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error adding question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                this.updateAnswerTotalCount(questionId, (status) => {\n                        callback(status);\n                });\n\n                // true means query ran right;\n                // callback(true);\n            });\n    }\n\n    addQuestion(content, userId, callback) {\n\n        const query = {\n            name: 'fetch-questions',\n            text: 'INSERT INTO questions(content, user_id) VALUES($1, $2);',\n            values: [content, userId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error adding question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                console.log(res.rows);\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    deleteQuestion(questionId, callback) {\n        const query = {\n            name: 'delete-questions',\n            text: 'DELETE FROM questions where id = $1;',\n            values: [questionId]\n        };\n\n        //'DELETE FROM questions where id = $1;', //'DELETE FROM questions where id = $1 AND user_id = $2;',\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error deleting question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                console.log(\"Delete was Succesful\");\n                callback(true);\n            });\n    }\n\n    fetchAllQuestions(callback) {\n\n        const query = {\n            name: 'fetch-all-questions',\n            text: 'SELECT questions.id, questions.content, questions.total_answers,  questions.accepted_answer_id, users.name, users.email from questions INNER JOIN users ON (questions.user_id = users.id)',\n            values: [],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error fetching questions\");\n                    console.error(err);\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchQuestion(questionId, callback) {\n        const query = {\n            name: 'fetch-question',\n            text: 'SELECT * from questions where id = $1',\n            values: [questionId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchAnswers(questionId, callback) {\n        const query = {\n            name: 'fetch-answer',\n            text: 'SELECT * from answers where question_id = $1',\n            values: [questionId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    isUserAnswerOwner(userId, answerId, callback) {\n\n        const query = {\n            name: 'fetch-answer',\n            text: 'SELECT * from answers where id = $1',\n            values: [answerId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n                if (res.rows.length === 1) {\n                    if (res.rows[0].user_id == userId) {\n                        callback(true);\n                        return;\n                    }\n                }\n                callback(false);\n            });\n    }\n\n    setAcceptedAnswer(questionId, answerId, callback) {\n\n        const query = {\n            name: 'set-questions-answer',\n            text: 'UPDATE questions SET accepted_answer_id= $1 WHERE id = $2',\n            values: [answerId, questionId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Update was not succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    updateAnswer(answerId, content, callback) {\n        const query = {\n            name: 'set-questions-answer',\n            text: 'UPDATE answers SET content = $1 WHERE id = $2',\n            values: [content, answerId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Update was succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    fetchQuestionWithHighestAnswers(callback) {\n        const query = {\n            name: 'fetch-top-questions',\n            text: 'SELECT * from questions ORDER BY total_answers DESC ',\n            // values: [],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows.length);\n            });\n    }\n\n    fetchAllUserQuestions(userId, callback) {\n        const query = {\n            name: 'fetch-all-user-questions',\n            text: 'SELECT * from questions where user_id = $1',\n            values: [userId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    addCommentToAnwser(answerId, content, userId, callback) {\n        const query = {\n            name: 'add-answer-comment',\n            text: 'INSERT INTO a_comments(answer_id, content, user_id) VALUES($1, $2, $3);',\n            values: [answerId, content, userId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Error adding comment : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n\n\n\n    /* upvote and downvotes */\n    upvoteAnswer(answerId, callback) {\n        const query = {\n            name: 'update-questions-upvote',\n            text: 'UPDATE answers SET up_vote = ((SELECT up_vote from answers where id = $1) + 1) WHERE id = $1;',\n            values: [answerId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Upvote was not succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n\n\n    }\n\n    downVoteAnswer(answerId, callback) {\n\n        const query = {\n            name: 'update-answers-downvote',\n            text: 'UPDATE answers SET down_vote = ((SELECT down_vote from answers where id = $1) + 1) WHERE id = $1;',\n            values: [answerId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Downvote was not succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n\n    }\n\n    /* search */\n    searchForQuestions(questionString, callback) {\n        const query = {\n            name: 'search-questions',\n            text: 'SELECT * FROM questions WHERE to_tsvector(content) @@ to_tsquery($1)',\n            values: [questionString],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    console.log(\"Error fetching question\");\n                    console.error(err.stack);\n                    callback(false);\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    updateAnswerTotalCount(questionId, callback) {\n        const query = {\n            name: 'update-answers-downvote',\n            text: 'UPDATE questions SET total_answers = ((SELECT total_answers from questions where id = $1) + 1) WHERE id = $1;',\n            values: [questionId],\n        };\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if (err) {\n                    callback(false);\n                    console.log(\"Total count update not succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    addCommentToQuestion() {\n\n    }\n\n\n\n\n\n}"]}