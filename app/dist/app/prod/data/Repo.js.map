{"version":3,"sources":["../../../../prod/data/Repo.js"],"names":["Repo","_db","DBHelper","questionId","content","userId","callback","query","name","text","values","queryWithConfig","err","res","console","log","error","stack","rows","answerId","length","user_id"],"mappings":"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","file":"Repo.js","sourcesContent":["\nimport { DBHelper } from './db/DBHelper';\n\n\nexport class Repo {\n\n\n    constructor(){\n        this._db = new DBHelper();\n    }\n\n\n    addAnswer(questionId, content, userId,  callback){\n\n        const query = {\n            name: 'fetch-answers',\n            text: 'INSERT INTO answers(question_id, content, user_id) VALUES($1, $2, $3);',\n            values: [questionId, content, userId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error adding question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    addQuestion(content, userId,  callback){\n\n        const query = {\n            name: 'fetch-questions',\n            text: 'INSERT INTO questions(content, user_id) VALUES($1, $2);',\n            values: [content, userId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error adding question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    deleteQuestion(questionId, callback) {\n        const query = {\n            name: 'delete-questions',\n            text: 'DELETE FROM questions where id = $1;', \n            values: [questionId]\n        }\n\n        //'DELETE FROM questions where id = $1;', //'DELETE FROM questions where id = $1 AND user_id = $2;',\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error deleting question : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                console.log(\"Delete was Succesful\");\n                callback(true);\n            });\n    }\n\n    fetchAllQuestions(callback) {\n\n        const query = {\n            name: 'fetch-all-questions',\n            text: 'SELECT * from questions',\n            values: [],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching questions\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchQuestion(questionId, callback) {\n        const query = {\n            name: 'fetch-question',\n            text: 'SELECT * from questions where id = $1',\n            values: [questionId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    fetchAnswers(questionId, callback) {\n        const query = {\n            name: 'fetch-answer',\n            text: 'SELECT * from answers where question_id = $1',\n            values: [questionId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n\n                callback(res.rows);\n            });\n    }\n\n    isUserAnswerOwner(userId, answerId, callback){\n        \n        const query = {\n            name: 'fetch-answer',\n            text: 'SELECT * from answers where id = $1',\n            values: [answerId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Error fetching question\");\n                    return;\n                }\n                if(res.rows.length === 1){\n                    if (res.rows[0].user_id == userId){\n                        callback(true);\n                        return;\n                    }\n                }\n                callback(false);\n            });\n    }\n\n    setAcceptedAnswer(questionId, answerId, callback){\n       \n        const query = {\n            name: 'set-questions-answer',\n            text: 'UPDATE questions SET accepted_answer_id= $1 WHERE id = $2',\n            values: [answerId, questionId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Update was not succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    updateAnswer(answerId, content, callback){\n        const query = {\n            name: 'set-questions-answer',\n            text: 'UPDATE answers SET content = $1 WHERE id = $2',\n            values: [content, answerId],\n        }\n        this\n            ._db\n            .queryWithConfig(query, (err, res) => {\n                if(err){\n                    callback(false);\n                    console.log(\"Update was succesful : \\n\");\n                    console.error(err.stack);\n                    return;\n                }\n\n                // true means query ran right;\n                callback(true);\n            });\n    }\n\n    fetchQuestionWithHighestAnswers() {\n\n    }\n\n    fetchUserQuestions() {\n\n    }\n\n    addCommentToAnwser() {\n\n    }\n\n    addCommentToQuestion() {\n\n    }\n\n\n    /* upvote and downvotes */\n    upvoteAnswer() {\n\n    }\n\n    downVoteAnswer() {\n\n    }\n\n    /* search */\n    searchForAnswers() {\n\n    }\n\n    \n\n}"]}