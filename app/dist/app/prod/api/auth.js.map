{"version":3,"sources":["../../../../prod/api/auth.js"],"names":["router","factory","Factory","auth","getAuth","browser","db","getDbc","post","req","res","email","body","toString","password","login","flag","data","session","footPrint","createFootprint","console","log","json","msg","status","userId","id","name","signUp","get","result","setUpDb","dropTables","os","version","cipher","crypto","createCipher","decipher","createDecipher","encrypted","update","final","decrypted","footprint","sessionFootPrint","send","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\nimport { detect } from 'detect-browser';\nimport crypto from 'crypto';\nimport session from 'express-session';\n\n\n\n\n// config();\nlet router = Router();\n\n\nconst factory = new Factory();\nconst auth = factory.getAuth();\nlet browser = detect();\n\nlet db = factory\n    .getDbc();\n\n\n/**\n *  This endpoint authenticates a user using th user's password and email \n *  (Note: change method from get to post)\n *  PAYLOAD:\n * @method POST\n * @param String email\n * @param String password\n * \n * @returns JSON\n */\nrouter.post('/login', (req, res) => {\n\n    let email = req.body.email.toString();\n    let password = req.body.password.toString();\n\n    auth.login(email, password, (flag, data) => {\n\n        if (flag) {\n\n            if (typeof data !== 'undefined') {\n                // create session here \n                req.session.footPrint = auth.createFootprint(email, password)\n                console.log(\"footprint\", req.session.footPrint)\n\n                res.json({\n                    msg: \"Login Succesful\",\n                    status: true,\n                    userId: data[0].id\n                });\n                return;\n\n            }\n\n            res.json({\n                msg: \"Login Error: Could not get user\",\n                status: false,\n            });\n\n            return;\n        }\n        if (flag === 'undefined' || flag == false) {\n            res.json({\n                msg: \"Login Error: please check credentials \",\n                status: false,\n            });\n        }\n\n    });\n\n});\n\n/**\n * This endpoint create a user account\n * \n * @method POST\n * \n * @param String email\n * @param String password\n * \n * @return JSON \n */\nrouter.post('/signup', (req, res) => {\n\n    // TODO validate and clean user date\n\n    let name = req.body.name.toString();\n    let email = req.body.email.toString();\n    let password = req.body.password.toString();\n\n    console.log(`parameters: ${name, email, password}`);\n\n    auth\n        .signUp(name, email, password, (flag, data) => {\n            if (flag) {\n\n                console.log(\"Value\" + data);\n                if (typeof data !== 'undefined') {\n                    console.log(\"Value\" + data);\n\n                    // create session here \n                    req.session.footPrint = auth.createFootprint(email, password)\n                    console.log(\"footprint\", req.session.footPrint)\n                    res.json({\n                        msg: \"Sign Up Succesful\",\n                        status: true,\n                        userId: data[0].id\n\n                    });\n                    return;\n                }\n\n                res.json({\n                    msg: \"Login Error: Could not retrive user creds\",\n                    status: false,\n                });\n\n                return;\n\n            }\n\n            res.json({\n                msg: \"Login Error: please check credentials \",\n                status: false,\n            });\n        });\n\n});\n\nrouter.get('/dbsetup/:key', (req, res) => {\n\n    // let key = req.params.key.toString();\n\n    // if (key ===  \"123\"){\n\n\n\n\n    // let createDb = db.createDatabase();\n\n    // set up db\n    let result = db\n        .setUpDb();\n\n\n\n\n    if (result) {\n        res.json({\n            msg: true,\n        });\n    }\n\n    res.json({\n        msg: false,\n    });\n\n\n    // }\n});\n\n\nrouter.get('/cleardb', (req, res) => {\n\n    db.dropTables((result) => {\n        if (result != false) {\n\n            res.json({\n                msg: 'success',\n                status: false,\n            });\n            return;\n        }\n\n    });\n\n    res.json({\n        msg: 'error',\n        status: false,\n    });\n\n});\n\n\nrouter.get('/crypto', (req, res) => {\n\n    let email = 'bensoft2k5@gmail.com';\n    let password = 'admin';\n\n\n\n    const footPrint = email + password + browser.name + browser.os + browser.version;\n    const cipher = crypto.createCipher('aes192', email);\n    const decipher = crypto.createDecipher('aes192', email);\n\n    let encrypted = cipher.update(footPrint, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    console.log(\"Encrypted: \" + encrypted);\n\n\n   \n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    console.log(\"Decrypted: \" + decrypted);\n\n    req.session.footprint = encrypted;\n    let sessionFootPrint = req.session.footprint;\n\n    if (sessionFootPrint === 'undefined'){\n        res.send(500, \"invalid session\"); \n        return;\n    }\n\n    res.json({\n        encrypted,\n        decrypted,\n        footprint: req.session.footprint,\n        });\n\n});\n\n\nrouter.get('/footprint', (req, res) => {\n    res.send(req.session.footprint);\n})\n\n\n\nmodule.exports = router;\n"]}