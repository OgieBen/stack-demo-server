{"version":3,"sources":["../../../../prod/api/auth.js"],"names":["router","factory","Factory","auth","getAuth","browser","post","req","res","email","body","toString","password","login","flag","data","encrypted","footPrint","name","os","version","cipher","crypto","createCipher","on","read","console","log","session","footprint","cookie","id","json","msg","status","userId","signUp","get","result","getDbc","setUpDb","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\nimport { detect } from 'detect-browser';\nimport  crypto  from 'crypto';\n\n\n\n// config();\nlet router = Router();\n\n\nconst factory = new Factory();\nconst auth = factory.getAuth();\nlet browser = detect();\n\n\n\n/**\n *  This endpoint authenticates a user using th user's password and email \n *  (Note: change method from get to post)\n *  PAYLOAD:\n * @method POST\n * @param String email\n * @param String password\n * \n * @returns JSON\n */\nrouter.post('/login', (req, res) => {\n\n    let email = req.body.email.toString();\n    let password = req.body.password.toString();\n\n    auth.login(email, password, (flag, data) => {\n        \n        if (flag) {\n\n            let encrypted = '';\n            const footPrint = email + password + browser.name + browser.os + browser.version;\n            const cipher = crypto.createCipher('aes192', footPrint);\n\n            cipher.on('readable', () => {\n                const data = cipher.read();\n                if (data) {\n                    encrypted += data.toString('hex');\n                }\n            });\n\n            cipher.on('end', () => {\n                console.log(encrypted);\n                req.session.footprint = encrypted;\n                req.cookie(email, encrypted);\n\n            });\n\n            if(data !== 0){\n                console.log(\"Value\" + data[0].id);\n\n                res.json({\n                    msg: \"Login Succesful\",\n                    status: true,\n                    userId: data[0].id\n    \n                });\n                return;\n                \n            }\n            \n            res.json({\n                msg: \"Login Error: Could not get user\",\n                status: false,\n            });\n\n            return;\n        }\n        if (flag === 'undefined' || flag == false) {\n            res.json({\n                msg: \"Login Error: please check credentials \",\n                status: false,\n            });\n        }\n\n    });\n\n});\n\n/**\n * This endpoint create a user account\n * \n * @method POST\n * \n * @param String email\n * @param String password\n * \n * @return JSON \n */\nrouter.post('/signup', (req, res) => {\n\n    // TODO validate and clean user date\n\n    let name = req.body.name.toString();\n    let email = req.body.email.toString();\n    let password = req.body.password.toString();\n\n    console.log(`parameters: ${name, email, password}`);\n\n    auth\n        .signUp(name, email, password, (flag) => {\n            if (flag) {\n\n\n                let encrypted = '';\n                const footPrint = email + password + browser.name + browser.os + browser.version;\n                const cipher = crypto.createCipher('aes192', footPrint);\n\n                cipher.on('readable', () => {\n                    const data = cipher.read();\n                    if (data) {\n                        encrypted += data.toString('hex');\n                    }\n                });\n\n                cipher.on('end', () => {\n                    console.log(encrypted);\n                    req.session.footprint = encrypted;\n                    req.cookie(email, encrypted);\n\n                });\n\n                res.json({\n                    msg: \"Sign Up Succesful\",\n                    status: true,\n                });\n                return;\n            }\n\n            res.json({\n                msg: \"Login Error: please check credentials \",\n                status: false,\n            });\n        });\n\n});\n\nrouter.get('/dbsetup/:key', (req, res) => {\n\n    // let key = req.params.key.toString();\n\n    // if (key ===  \"123\"){\n\n    // set up db\n    let result = factory\n        .getDbc()\n        .setUpDb();\n\n    if (result) {\n        res.json({\n            msg: true,\n        });\n    }\n\n    res.json({\n        msg: false,\n    });\n\n\n    // }\n});\n\n\n\n\nmodule.exports = router;\n"]}