{"version":3,"sources":["../../../../prod/api/Auth.js"],"names":["router","factory","Factory","auth","getAuth","browser","db","getDbc","post","req","res","email","body","toString","password","login","flag","data","encrypted","footPrint","name","os","version","cipher","crypto","createCipher","on","read","console","log","session","footprint","cookie","id","json","msg","status","userId","signUp","get","result","setUpDb","dropTables","decipher","createDecipher","update","final","decrypted","sessionFootPrint","send","module","exports"],"mappings":"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","file":"Auth.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\nimport { detect } from 'detect-browser';\nimport crypto from 'crypto';\nimport session from 'express-session';\n\n\n\n\n// config();\nlet router = Router();\n\n\nconst factory = new Factory();\nconst auth = factory.getAuth();\nlet browser = detect();\n\nlet db = factory\n    .getDbc();\n\n\n/**\n *  This endpoint authenticates a user using th user's password and email \n *  (Note: change method from get to post)\n *  PAYLOAD:\n * @method POST\n * @param String email\n * @param String password\n * \n * @returns JSON\n */\nrouter.post('/login', (req, res) => {\n\n    let email = req.body.email.toString();\n    let password = req.body.password.toString();\n\n    auth.login(email, password, (flag, data) => {\n\n        if (flag) {\n\n            let encrypted = '';\n            const footPrint = email + password + browser.name + browser.os + browser.version;\n            const cipher = crypto.createCipher('aes192', footPrint);\n\n            cipher.on('readable', () => {\n                const data = cipher.read();\n                if (data) {\n                    encrypted += data.toString('hex');\n                }\n            });\n\n            cipher.on('end', () => {\n                console.log(encrypted);\n                req.session.footprint = encrypted;\n                req.cookie(email, encrypted);\n\n            });\n\n            if (typeof data !== 'undefined') {\n                console.log(\"Value\" + data[0].id);\n\n                res.json({\n                    msg: \"Login Succesful\",\n                    status: true,\n                    userId: data[0].id\n\n                });\n                return;\n\n            }\n\n            res.json({\n                msg: \"Login Error: Could not get user\",\n                status: false,\n            });\n\n            return;\n        }\n        if (flag === 'undefined' || flag == false) {\n            res.json({\n                msg: \"Login Error: please check credentials \",\n                status: false,\n            });\n        }\n\n    });\n\n});\n\n/**\n * This endpoint create a user account\n * \n * @method POST\n * \n * @param String email\n * @param String password\n * \n * @return JSON \n */\nrouter.post('/signup', (req, res) => {\n\n    // TODO validate and clean user date\n\n    let name = req.body.name.toString();\n    let email = req.body.email.toString();\n    let password = req.body.password.toString();\n\n    console.log(`parameters: ${name, email, password}`);\n\n    auth\n        .signUp(name, email, password, (flag, data) => {\n            if (flag) {\n\n\n                let encrypted = '';\n                const footPrint = email + password + browser.name + browser.os + browser.version;\n                const cipher = crypto.createCipher('aes192', footPrint);\n\n                cipher.on('readable', () => {\n                    const data = cipher.read();\n                    if (data) {\n                        encrypted += data.toString('hex');\n                    }\n                });\n\n                cipher.on('end', () => {\n                    console.log(encrypted);\n                    req.session.footprint = encrypted;\n                    req.cookie(email, encrypted);\n\n                });\n\n                console.log(\"Value\" + data);\n                if (typeof data !== 'undefined') {\n                    console.log(\"Value\" + data);\n\n                    res.json({\n                        msg: \"Sign Up Succesful\",\n                        status: true,\n                        userId: data[0].id\n\n                    });\n                    return;\n                }\n\n                res.json({\n                    msg: \"Login Error: Could not retrive user creds\",\n                    status: false,\n                });\n\n                return;\n\n            }\n\n            res.json({\n                msg: \"Login Error: please check credentials \",\n                status: false,\n            });\n        });\n\n});\n\nrouter.get('/dbsetup/:key', (req, res) => {\n\n    // let key = req.params.key.toString();\n\n    // if (key ===  \"123\"){\n\n\n\n\n    // let createDb = db.createDatabase();\n\n    // set up db\n    let result = db\n        .setUpDb();\n\n\n\n\n    if (result) {\n        res.json({\n            msg: true,\n        });\n    }\n\n    res.json({\n        msg: false,\n    });\n\n\n    // }\n});\n\n\nrouter.get('/cleardb', (req, res) => {\n\n    db.dropTables((result) => {\n        if (result != false) {\n\n            res.json({\n                msg: 'success',\n                status: false,\n            });\n            return;\n        }\n\n    });\n\n    res.json({\n        msg: 'error',\n        status: false,\n    });\n\n});\n\n\nrouter.get('/crypto', (req, res) => {\n\n    let email = 'bensoft2k5@gmail.com';\n    let password = 'admin';\n\n\n\n    const footPrint = email + password + browser.name + browser.os + browser.version;\n    const cipher = crypto.createCipher('aes192', email);\n    const decipher = crypto.createDecipher('aes192', email);\n\n    let encrypted = cipher.update(footPrint, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    console.log(\"Encrypted: \" + encrypted);\n\n\n   \n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    console.log(\"Decrypted: \" + decrypted);\n\n    req.session.footprint = encrypted;\n    let sessionFootPrint = req.session.footprint;\n\n    if (sessionFootPrint === 'undefined'){\n        res.send(500, \"invalid session\");\n        return;\n    }\n\n    res.json({\n        encrypted,\n        decrypted,\n        footprint: req.session.footprint,\n        });\n\n});\n\n\nrouter.get('/footprint', (req, res) => {\n    res.send(req.session.footprint);\n})\n\n\n\nmodule.exports = router;\n"]}