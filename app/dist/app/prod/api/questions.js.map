{"version":3,"sources":["../../../../prod/api/questions.js"],"names":["router","factory","Factory","repo","getRepo","get","req","res","fetchAllQuestions","result","console","log","data","json","msg","userId","parseInt","params","fetchAllUserQuestions","questionId","fetchQuestion","post","content","body","question","addQuestion","status","delete","deleteQuestion","answerId","comment","toString","addCommentToAnwser","put","upvoteAnswer","downVoteAnswer","answer","addAnswer","accept","isUserAnswerOwner","setAcceptedAnswer","updatedAnswer","updateAnswer","searchKey","searchForQuestions","module","exports"],"mappings":"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","file":"questions.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\nimport axios from 'axios';\n\nlet router = Router();\n\n\nlet factory = new Factory();\n// let auth = factory.getAuth();\nlet repo = factory.getRepo();\n\n\n/**\n * Fetches all questions that have been asked on the platform\n * @method GET\n * \n * @returns {JSON} List\n */\nrouter.get('/', (req, res) => {\n\n    repo.fetchAllQuestions((result) => {\n        if (result) {\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n\n/**\n * Fetches all questions that a particular user has asked on the platform\n * @method GET\n * \n * @param {Integer} userId\n * \n * @returns {JSON} List\n */\nrouter.get('/all/:userId', (req, res) => {\n\n    let userId = parseInt(req.params.userId);\n\n    repo.fetchAllUserQuestions(userId, (result) => {\n        if (result) {\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Fetch a specific question\n * This should come with all the answers\n * provided so far for the question.\n * \n * @method GET\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.get('/:questionId', (req, res) => {\n\n    let questionId = parseInt(req.params.questionId);\n\n    repo.fetchQuestion(questionId, (result) => {\n        if (result) {\n\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Adds a question on  the platform\n * \n * @method POST\n */\nrouter.post('/', (req, res) => {\n\n    let content = req.body.question;\n    let userId = req.body.userId;\n\n    repo\n        .addQuestion(content, userId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * Removes a question from the platform\n * \n * @method DELETE\n */\nrouter.delete('/:questionId', (req, res) => {\n\n    // let questionId = parseInt(req.params.questionId);\n    let questionId = parseInt(req.body.questionId);\n\n    repo\n        .deleteQuestion(questionId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n\n/**\n * Adds comment to questions being asked\n * \n * @method POST\n * @param {Integer} questionId\n * @param {Integer} answerId\n * \n * \n * @returns {Boolean} \n */\nrouter.post('/:questionId/answers/:answerId/comments', (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n    let content = req.body.comment.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addCommentToAnwser(answerId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n\n\n/**\n * Upvotes an Answer\n * \n * @method PUT\n * @param {Integer} answerId\n * \n * @returns {Boolean} \n */\nrouter.put('/:questionId/answers/:answerId/upvote', (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n\n\n    // check if user has upvoted before\n    // if false upvote\n    // else\n    //  deny upvote \n    repo\n        .upvoteAnswer(answerId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * Downvotes an Answer\n * \n * @method PUT\n * @param {Integer} answerId\n * \n * @returns {Boolean} \n */\nrouter.put('/:questionId/answers/:answerId/downvote', (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n\n    // check if user has downvoted before\n    // if false downvote\n    // else\n    //  deny downvote \n\n    repo\n        .downVoteAnswer(answerId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * Post an answer to a question\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/:questionId/answers', (req, res) => {\n\n    let questionId = parseInt(req.body.questionId);\n    let content = req.body.answer.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addAnswer(questionId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * \n * Mark an answer as\n * accepted or\n * update an answer.\n * \n * This endpoint should be available to\n * only the answer author and question\n * author. The answer author calls the\n * route to update answer while the\n * question author calls the route to\n * accept answer.\n * \n * @method PUT\n * \n * @return {Boolean}\n */\nrouter.put('/:questionId/answers/:anwserId/', (req, res) => {\n    // use flag to check if incoming request is an update \n    // if it is an update, update the answer entry\n\n    let questionId = parseInt(req.body.questionId);\n    let answerId = parseInt(req.body.answerId);\n    let accept = req.body.accept;\n    let userId = parseInt(req.body.userId);\n\n    // if accept is true\n    // and user id is of owner\n    // mark answer as accepted\n    if (accept) {\n        repo\n            .isUserAnswerOwner(userId, answerId, (status) => {\n                // if user is owner\n                if (status) {\n                    // accept answer;\n                    repo.setAcceptedAnswer(questionId, answerId, (status) => {\n                        if (status) {\n                            // console.log('Answer was successfully updated');\n                            console.log('Preferred Answer was set');\n\n                            res.json({\n                                msg: true,\n                            });\n\n                            return;\n                        }\n\n                        res.json({\n                            msg: false,\n                        });\n                    });\n                }\n            });\n        return;\n    }\n\n    let updatedAnswer = req.body.answer;\n    repo.updateAnswer(answerId, updatedAnswer, (status) => {\n\n        if (status) {\n            console.log('Update was successful');\n            res.json({\n                msg: true,\n            });\n            return;\n        }\n\n        console.log('Update was not successful');\n        res.json({\n            msg: false,\n        });\n\n    });\n\n\n\n\n\n});\n\n\n/**\n * Post an answer to a question\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/search', (req, res) => {\n\n    let searchKey = req.body.searchKey.toString();\n    \n    repo\n        .searchForQuestions(searchKey, (result) => {\n            if(result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                    data: result,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n\n\n\n\n\n\n\nmodule.exports = router;"]}