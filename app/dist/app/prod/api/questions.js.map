{"version":3,"sources":["../../../../prod/api/questions.js"],"names":["cors","require","router","factory","Factory","repo","getRepo","get","req","res","fetchAllQuestions","result","json","msg","status","data","userId","parseInt","params","fetchAllUserQuestions","questionId","fetchQuestion","question","console","log","fetchAnswers","answers","post","content","body","addQuestion","delete","deleteQuestion","answerId","comment","toString","addCommentToAnwser","put","upvoteAnswer","downVoteAnswer","answer","addAnswer","accept","isUserAnswerOwner","setAcceptedAnswer","updatedAnswer","updateAnswer","searchKey","searchForQuestions","id","getUser","e","getUserAnswers","module","exports"],"mappings":"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","file":"questions.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\n// import cors from 'cors';\n\nlet cors = require('cors');\n\nlet router = Router();\n\n\nlet factory = new Factory();\n// let auth = factory.getAuth();\nlet repo = factory.getRepo();\n\n\n/**\n * Fetches all questions that have been asked on the platform\n * @method GET\n * \n * @returns {JSON} List\n */\nrouter.get('/', cors(), (req, res) => {\n\n    repo.fetchAllQuestions((result) => {\n        if (result) {\n\n            res.json({\n                msg: 'Success',\n                status: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: 'There was an error fetching questions',\n            status: false,\n        });\n    });\n});\n\n\n/**\n * Fetches all questions that a particular user has asked on the platform\n * @method GET\n * \n * @param {Integer} userId\n * \n * @returns {JSON} List\n */\nrouter.get('/all/:userId', cors(), (req, res) => {\n\n    let userId = parseInt(req.params.userId);\n\n    repo.fetchAllUserQuestions(userId, (result) => {\n        if (result) {\n\n            res.json({\n                msg: 'Success',\n                status: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: 'There was an error fetching questions',\n            status: true,\n        });\n    });\n});\n\n/**\n * Fetch a specific question\n * This should come with all the answers\n * provided so far for the question.\n * \n * @method GET\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.get('/:questionId', cors(), (req, res) => {\n\n    let questionId = parseInt(req.params.questionId);\n\n    repo.fetchQuestion(questionId, (question) => {\n        if (question) {\n\n            console.log({\n                question\n            });\n\n            repo.fetchAnswers(questionId, (answers) => {\n                if (answers) {\n\n                    res.json({\n                        msg: 'Success',\n                        status: false,\n                        question,\n                        answers,\n                    });\n                    return;\n                }\n\n                res.json({\n                    msg: 'There was an error fetching answers for question with id ' + questionId,\n                    status: false,\n                });\n\n            });\n            return;\n        }\n\n        res.json({\n            msg: 'There was an Error fetching Question with id ' + questionId,\n            status: false,\n        });\n    });\n});\n\n/**\n * Adds a question on  the platform\n * \n * @method POST\n */\nrouter.post('/', cors(), (req, res) => {\n\n    let content = req.body.question;\n    let userId = req.body.userId;\n\n    repo\n        .addQuestion(content, userId, (status) => {\n            if (status) {\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                });\n                return;\n            }\n            res.json({\n                msg: 'Error adding Question',\n                status: false,\n            });\n        });\n});\n\n/**\n * Removes a question from the platform\n * \n * @method DELETE\n */\nrouter.delete('/:questionId', cors(), (req, res) => {\n\n    // let questionId = parseInt(req.params.questionId);\n    let questionId = parseInt(req.body.questionId);\n\n    repo\n        .deleteQuestion(questionId, (status) => {\n            if (status) {\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                });\n                return;\n            }\n            res.json({\n                msg: 'Error deleting Question',\n                status: false,\n            });\n        });\n});\n\n\n/**\n * Adds comment to questions being asked\n * \n * @method POST\n * @param {Integer} questionId\n * @param {Integer} answerId\n * \n * \n * @returns {Boolean} \n */\nrouter.post('/:questionId/answers/:answerId/comments', cors(), (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n    let content = req.body.comment.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addCommentToAnwser(answerId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                });\n                return;\n            }\n            res.json({\n                msg: \"Error adding Comment\",\n                status: false,\n            });\n        });\n});\n\n\n\n/**\n * Upvotes an Answer\n * \n * @method PUT\n * @param {Integer} answerId\n * \n * @returns {Boolean} \n */\nrouter.put('/:questionId/answers/:answerId/upvote', cors(), (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n\n\n    // check if user has upvoted before\n    // if false upvote\n    // else\n    //  deny upvote \n    repo\n        .upvoteAnswer(answerId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                });\n                return;\n            }\n            res.json({\n                msg: 'Error up-voting answer',\n                status: false,\n            });\n        });\n});\n\n/**\n * Downvotes an Answer\n * \n * @method PUT\n * @param {Integer} answerId\n * \n * @returns {Boolean} \n */\nrouter.put('/:questionId/answers/:answerId/downvote', cors(), (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n\n    // check if user has downvoted before\n    // if false downvote\n    // else\n    //  deny downvote \n\n    repo\n        .downVoteAnswer(answerId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                });\n                return;\n            }\n            res.json({\n                msg: 'Error down-voting answer',\n                status: false,\n            });\n        });\n});\n\n/**\n * Post an answer to a question\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/:questionId/answers', (req, res) => {\n\n    let questionId = parseInt(req.body.questionId);\n    let content = req.body.answer.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addAnswer(questionId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                });\n                return;\n            }\n            res.json({\n                msg: 'Error adding Answer to question with id ' + questionId,\n                status: false,\n            });\n        });\n});\n\n/**\n * \n * Mark an answer as\n * accepted or\n * update an answer.\n * \n * This endpoint should be available to\n * only the answer author and question\n * author. The answer author calls the\n * route to update answer while the\n * question author calls the route to\n * accept answer.\n * \n * @method PUT\n * \n * @return {Boolean}\n */\nrouter.put('/:questionId/answers/:anwserId/', (req, res) => {\n    // use flag to check if incoming request is an update \n    // if it is an update, update the answer entry\n\n    let questionId = parseInt(req.body.questionId);\n    let answerId = parseInt(req.body.answerId);\n    let accept = req.body.accept;\n    let userId = parseInt(req.body.userId);\n\n    // if accept is true\n    // and user id is of owner\n    // mark answer as accepted\n    if (accept) {\n        repo\n            .isUserAnswerOwner(userId, answerId, (status) => {\n                // if user is owner\n                if (status) {\n                    // accept answer;\n                    repo.setAcceptedAnswer(questionId, answerId, (status) => {\n                        if (status) {\n                            // console.log('Answer was successfully updated');\n                            console.log('Preferred Answer was set');\n\n                            res.json({\n                                msg: 'Success',\n                                status: true,\n                            });\n\n                            return;\n                        }\n\n                        res.json({\n                            msg: 'Answer was not selected',\n                            status: false,\n                        });\n                    });\n                }\n            });\n        return;\n    }\n\n    let updatedAnswer = req.body.answer;\n    repo.updateAnswer(answerId, updatedAnswer, (status) => {\n\n        if (status) {\n            console.log('Update was successful');\n            res.json({\n                msg: 'Success',\n                status: true,\n            });\n            return;\n        }\n\n        console.log('Update was not successful');\n        res.json({\n            msg: 'Update was not successful',\n            status: false,\n        });\n\n    });\n\n\n\n\n\n});\n\n\n/**\n * Searches for questions based on query\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/search', (req, res) => {\n\n    let searchKey = req.body.searchKey.toString();\n\n    repo\n        .searchForQuestions(searchKey, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                    data: result,\n                });\n                return;\n            }\n            res.json({\n                msg: \"No matching result was found\",\n                status: false,\n            });\n        });\n});\n\n\n\nrouter.get('/user/:id', (req, res) => {\n    // let userId = req.body.userId;\n    let userId = req.params.id;\n    try {\n        userId = parseInt(userId);\n        repo\n        .getUser(userId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                    data: result,\n                });\n                return;\n            }\n            res.json({\n                msg: `No user with ${userId} was found`,\n                status: false,\n            });\n        });\n    } catch (e) {\n        res.json({\n            msg: \"Invalid query parameter\",\n            status: false,\n        });\n    }\n\n});\n\n\nrouter.get('/answers/count/:id', (req, res) => {\n\n    let userId = req.params.id;\n    try {\n        userId = parseInt(userId);\n        repo\n        .getUserAnswers(userId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: 'Success',\n                    status: true,\n                    data: result,\n                });\n                return;\n            }\n            res.json({\n                msg: `No user with ${userId} was found`,\n                status: false,\n            });\n        });\n    } catch (e) {\n        res.json({\n            msg: \"Invalid query parameter\",\n            status: false,\n        });\n   \n    }\n});\n\n\n\n\nmodule.exports = router;"]}