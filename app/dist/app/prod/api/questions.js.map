{"version":3,"sources":["../../../../prod/api/questions.js"],"names":["router","factory","Factory","repo","getRepo","get","req","res","fetchAllQuestions","result","console","log","data","json","msg","questionId","parseInt","params","fetchQuestion","post","content","body","question","userId","addQuestion","status","delete","deleteQuestion","answer","toString","addAnswer","put","answerId","accept","isUserAnswerOwner","setAcceptedAnswer","updatedAnswer","updateAnswer","module","exports"],"mappings":"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","file":"questions.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\nimport path from 'path';\nimport axios from 'axios';\n\nlet router = Router();\n\n\nlet factory = new Factory();\n// let auth = factory.getAuth();\nlet repo = factory.getRepo();\n\n\n/**\n * Fetches all questions that have been asked on the platform\n * @method GET\n * \n * @returns {JSON} List\n */\nrouter.get('/', (req, res) => {\n\n    repo.fetchAllQuestions((result) => {\n        if (result) {\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Fetch a specific question\n * This should come with all the answers\n * provided so far for the question.\n * \n * @method GET\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.get('/:questionId', (req, res) => {\n\n    let questionId = parseInt(req.params.questionId);\n\n    repo.fetchQuestion(questionId, (result) => {\n        if (result) {\n\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Adds a question on  the platform\n * \n * @method POST\n */\nrouter.post('/', (req, res) => {\n\n    let content = req.body.question;\n    let userId = req.body.userId;\n\n    repo\n        .addQuestion(content, userId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            })\n        });\n});\n\n/**\n * Removes a question from the platform\n * \n * @method DELETE\n */\nrouter.delete('/:questionId', (req, res) => {\n\n    // let questionId = parseInt(req.params.questionId);\n    let questionId = parseInt(req.body.questionId);\n\n    repo\n        .deleteQuestion(questionId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            })\n        });\n});\n\n\n/**\n * Post an answer to a question\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/:questionId/answers', (req, res) => {\n\n    let questionId = parseInt(req.body.questionId);\n    let content = req.body.answer.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addAnswer(questionId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            })\n        });\n});\n\n/**\n * \n * Mark an answer as\n * accepted or\n * update an answer.\n * \n * This endpoint should be available to\n * only the answer author and question\n * author. The answer author calls the\n * route to update answer while the\n * question author calls the route to\n * accept answer.\n * \n * @method PUT\n * \n * @return {Boolean}\n */\nrouter.put('/:questionId/answers/:anwserId/', (req, res) => {\n    // use flag to check if incoming request is an update \n    // if it is an update, update the answer entry\n\n    let questionId = parseInt(req.body.questionId);\n    let answerId = parseInt(req.body.answerId);\n    let accept = req.body.accept;\n    let userId = parseInt(req.body.userId);\n\n    // if accept is true\n    // and user id is of owner\n    // mark answer as accepted\n    if (accept) {\n        repo\n            .isUserAnswerOwner(userId, answerId, (status) => {\n                // if user is owner\n                if (status) {\n                    // accept answer;\n                    repo.setAcceptedAnswer(questionId, answerId, (status) => {\n                        if (status) {\n                            // console.log('Answer was successfully updated');\n                            console.log('Preferred Answer was set');\n\n                            res.json({\n                                msg: true,\n                            });\n\n                            return;\n                        }\n\n                        res.json({\n                            msg: false,\n                        });\n                    });\n                }\n            });\n        return;\n    }\n\n    let updatedAnswer = req.body.answer;\n    repo.updateAnswer(answerId, updatedAnswer, (status) => {\n\n        if(status){\n            console.log('Update was successful');\n            res.json({\n                msg: true,\n            });\n            return;\n        }\n\n        console.log('Update was not successful');\n        res.json({\n            msg: false,\n        });\n        \n    });\n\n\n\n\n\n});\n\n\n\n/**\n * simple test route\n */\n/* router.get('/home/form', (req, res) => {\n\n    let homePath = path.resolve(path.join(__dirname, '../../../../'));\n    let absolutePath = path.normalize(homePath + \"/public/html/index.html\");\n\n\n    res.sendFile(absolutePath);\n}); */\n\n\n\n\nmodule.exports = router;"]}