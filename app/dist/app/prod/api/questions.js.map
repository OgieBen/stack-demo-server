{"version":3,"sources":["../../../../prod/api/questions.js"],"names":["router","factory","Factory","repo","getRepo","get","req","res","fetchAllQuestions","result","json","msg","data","userId","parseInt","params","fetchAllUserQuestions","questionId","fetchQuestion","console","log","post","content","body","question","addQuestion","status","delete","deleteQuestion","answerId","comment","toString","addCommentToAnwser","put","upvoteAnswer","downVoteAnswer","answer","addAnswer","accept","isUserAnswerOwner","setAcceptedAnswer","updatedAnswer","updateAnswer","searchKey","searchForQuestions","module","exports"],"mappings":"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","file":"questions.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\nimport cors from 'cors';\nimport axios from 'axios';\n\nlet router = Router();\n\n\nlet factory = new Factory();\n// let auth = factory.getAuth();\nlet repo = factory.getRepo();\n\n\n/**\n * Fetches all questions that have been asked on the platform\n * @method GET\n * \n * @returns {JSON} List\n */\nrouter.get('/', cors(), (req, res) => {\n\n    repo.fetchAllQuestions((result) => {\n        if (result) {\n            \n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n\n/**\n * Fetches all questions that a particular user has asked on the platform\n * @method GET\n * \n * @param {Integer} userId\n * \n * @returns {JSON} List\n */\nrouter.get('/all/:userId', cors(), (req, res) => {\n\n    let userId = parseInt(req.params.userId);\n\n    repo.fetchAllUserQuestions(userId, (result) => {\n        if (result) {\n            \n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Fetch a specific question\n * This should come with all the answers\n * provided so far for the question.\n * \n * @method GET\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.get('/:questionId', cors(), (req, res) => {\n\n    let questionId = parseInt(req.params.questionId);\n\n    repo.fetchQuestion(questionId, (result) => {\n        if (result) {\n\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Adds a question on  the platform\n * \n * @method POST\n */\nrouter.post('/', cors(), (req, res) => {\n\n    let content = req.body.question;\n    let userId = req.body.userId;\n\n    repo\n        .addQuestion(content, userId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * Removes a question from the platform\n * \n * @method DELETE\n */\nrouter.delete('/:questionId', cors(), (req, res) => {\n\n    // let questionId = parseInt(req.params.questionId);\n    let questionId = parseInt(req.body.questionId);\n\n    repo\n        .deleteQuestion(questionId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n\n/**\n * Adds comment to questions being asked\n * \n * @method POST\n * @param {Integer} questionId\n * @param {Integer} answerId\n * \n * \n * @returns {Boolean} \n */\nrouter.post('/:questionId/answers/:answerId/comments', cors(), (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n    let content = req.body.comment.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addCommentToAnwser(answerId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n\n\n/**\n * Upvotes an Answer\n * \n * @method PUT\n * @param {Integer} answerId\n * \n * @returns {Boolean} \n */\nrouter.put('/:questionId/answers/:answerId/upvote', cors(), (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n\n\n    // check if user has upvoted before\n    // if false upvote\n    // else\n    //  deny upvote \n    repo\n        .upvoteAnswer(answerId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * Downvotes an Answer\n * \n * @method PUT\n * @param {Integer} answerId\n * \n * @returns {Boolean} \n */\nrouter.put('/:questionId/answers/:answerId/downvote', cors(), (req, res) => {\n\n\n    let answerId = parseInt(req.body.answerId);\n\n    // check if user has downvoted before\n    // if false downvote\n    // else\n    //  deny downvote \n\n    repo\n        .downVoteAnswer(answerId, (result) => {\n            if (result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * Post an answer to a question\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/:questionId/answers', (req, res) => {\n\n    let questionId = parseInt(req.body.questionId);\n    let content = req.body.answer.toString();\n    let userId = parseInt(req.body.userId);\n\n    repo\n        .addAnswer(questionId, content, userId, (result) => {\n            if (result) {\n\n                console.log(result);\n\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n/**\n * \n * Mark an answer as\n * accepted or\n * update an answer.\n * \n * This endpoint should be available to\n * only the answer author and question\n * author. The answer author calls the\n * route to update answer while the\n * question author calls the route to\n * accept answer.\n * \n * @method PUT\n * \n * @return {Boolean}\n */\nrouter.put('/:questionId/answers/:anwserId/', (req, res) => {\n    // use flag to check if incoming request is an update \n    // if it is an update, update the answer entry\n\n    let questionId = parseInt(req.body.questionId);\n    let answerId = parseInt(req.body.answerId);\n    let accept = req.body.accept;\n    let userId = parseInt(req.body.userId);\n\n    // if accept is true\n    // and user id is of owner\n    // mark answer as accepted\n    if (accept) {\n        repo\n            .isUserAnswerOwner(userId, answerId, (status) => {\n                // if user is owner\n                if (status) {\n                    // accept answer;\n                    repo.setAcceptedAnswer(questionId, answerId, (status) => {\n                        if (status) {\n                            // console.log('Answer was successfully updated');\n                            console.log('Preferred Answer was set');\n\n                            res.json({\n                                msg: true,\n                            });\n\n                            return;\n                        }\n\n                        res.json({\n                            msg: false,\n                        });\n                    });\n                }\n            });\n        return;\n    }\n\n    let updatedAnswer = req.body.answer;\n    repo.updateAnswer(answerId, updatedAnswer, (status) => {\n\n        if (status) {\n            console.log('Update was successful');\n            res.json({\n                msg: true,\n            });\n            return;\n        }\n\n        console.log('Update was not successful');\n        res.json({\n            msg: false,\n        });\n\n    });\n\n\n\n\n\n});\n\n\n/**\n * Post an answer to a question\n * \n * @method POST\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.post('/search', (req, res) => {\n\n    let searchKey = req.body.searchKey.toString();\n    \n    repo\n        .searchForQuestions(searchKey, (result) => {\n            if(result) {\n\n                console.log(result);\n                res.json({\n                    msg: true,\n                    data: result,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            });\n        });\n});\n\n\n\n\n\n\n\n\nmodule.exports = router;"]}