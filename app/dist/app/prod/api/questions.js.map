{"version":3,"sources":["../../../../prod/api/questions.js"],"names":["router","factory","Factory","repo","getRepo","get","req","res","fetchAllQuestions","result","console","log","data","json","msg","questionId","parseInt","params","id","fetchQuestion","post","content","userId","addQuestion","status","deleteQuestion","module","exports"],"mappings":";;AAAA;;AACA;;AAEA,IAAIA,SAAS,sBAAb;;AAGA,IAAIC,UAAU,IAAIC,gBAAJ,EAAd;AACA;AACA,IAAIC,OAAOF,QAAQG,OAAR,EAAX;;AAGA;;;;;;AAMAJ,OAAOK,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAE1BJ,SAAKK,iBAAL,CAAuB,UAACC,MAAD,EAAY;AAC/B,YAAIA,MAAJ,EAAY;AACRC,oBAAQC,GAAR,CAAY;AACRC,sBAAMH;AADE,aAAZ;;AAIAF,gBAAIM,IAAJ,CAAS;AACLC,qBAAK,IADA;AAELF,sBAAMH;AAFD,aAAT;AAIA;AACH;;AAEDF,YAAIM,IAAJ,CAAS;AACLC,iBAAK;AADA,SAAT;AAGH,KAhBD;AAiBH,CAnBD;;AAqBA;;;;;;;;;;AAUAd,OAAOK,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAE7B,QAAIQ,aAAaC,SAASV,IAAIW,MAAJ,CAAWC,EAApB,CAAjB;;AAEAf,SAAKgB,aAAL,CAAmBJ,UAAnB,EAA+B,UAACN,MAAD,EAAY;AACvC,YAAIA,MAAJ,EAAY;;AAERC,oBAAQC,GAAR,CAAY;AACRC,sBAAMH;AADE,aAAZ;;AAIAF,gBAAIM,IAAJ,CAAS;AACLC,qBAAK,IADA;AAELF,sBAAMH;AAFD,aAAT;AAIA;AACH;;AAEDF,YAAIM,IAAJ,CAAS;AACLC,iBAAK;AADA,SAAT;AAGH,KAjBD;AAkBH,CAtBD;;AAwBA;;;;;AAKAd,OAAOoB,IAAP,CAAY,GAAZ,EAAiB,UAACd,GAAD,EAAMC,GAAN,EAAc;;AAE3B,QAAIc,UAAUf,IAAIW,MAAJ,CAAWI,OAAzB;AACA,QAAIC,SAAShB,IAAIW,MAAJ,CAAWC,EAAxB;;AAEAf,SACKoB,WADL,CACiBF,OADjB,EAC0BC,MAD1B,EACkC,UAACE,MAAD,EAAY;AACtC,YAAIA,MAAJ,EAAY;AACRjB,gBAAIM,IAAJ,CAAS;AACLC,qBAAK;AADA,aAAT;AAGA;AACH;AACDP,YAAIM,IAAJ,CAAS;AACLC,iBAAK;AADA,SAAT;AAGH,KAXL;AAYH,CAjBD;;AAmBA;;;;;AAKAd,OAAOK,GAAP,CAAW,aAAX,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAIpC,QAAIQ,aAAaC,SAASV,IAAIW,MAAJ,CAAWC,EAApB,CAAjB;;AAEAf,SACKsB,cADL,CACoBV,UADpB,EACgC,UAACS,MAAD,EAAY;AACpC,YAAIA,MAAJ,EAAY;AACRjB,gBAAIM,IAAJ,CAAS;AACLC,qBAAK;AADA,aAAT;AAGA;AACH;AACDP,YAAIM,IAAJ,CAAS;AACLC,iBAAK;AADA,SAAT;AAGH,KAXL;AAYH,CAlBD;;AAsBAY,OAAOC,OAAP,GAAiB3B,MAAjB","file":"questions.js","sourcesContent":["import { Router } from 'express';\nimport { Factory } from '../Factory';\n\nlet router = Router();\n\n\nlet factory = new Factory();\n// let auth = factory.getAuth();\nlet repo = factory.getRepo();\n\n\n/**\n * Fetches all questions that have been asked on the platform\n * @method GET\n * \n * @returns {JSON} List\n */\nrouter.get('/', (req, res) => {\n\n    repo.fetchAllQuestions((result) => {\n        if (result) {\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Fetch a specific question\n * This should come with all the answers\n * provided so far for the question.\n * \n * @method GET\n * @param {Integer} id\n * \n * @returns {JSON} Question\n */\nrouter.get('/:id', (req, res) => {\n\n    let questionId = parseInt(req.params.id);\n\n    repo.fetchQuestion(questionId, (result) => {\n        if (result) {\n\n            console.log({\n                data: result\n            });\n\n            res.json({\n                msg: true,\n                data: result,\n            });\n            return;\n        }\n\n        res.json({\n            msg: false,\n        });\n    });\n});\n\n/**\n * Adds a question the platform\n * \n * @method POST\n */\nrouter.post('/', (req, res) => {\n\n    let content = req.params.content;\n    let userId = req.params.id;\n\n    repo\n        .addQuestion(content, userId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            })\n        });\n});\n\n/**\n * Removes a question from the platform\n * \n * @method DELETE\n */\nrouter.get('/delete/:id', (req, res) => {\n\n\n    \n    let questionId = parseInt(req.params.id);\n    \n    repo\n        .deleteQuestion(questionId, (status) => {\n            if (status) {\n                res.json({\n                    msg: true,\n                });\n                return;\n            }\n            res.json({\n                msg: false,\n            })\n        });\n});\n\n\n\nmodule.exports = router;"]}